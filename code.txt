Bên dưới là các file cho Streamlit app của tôi hiện tại:
1. Đây là file app.py:
import streamlit as st
from auth import setup_auth
import pandas as pd
import streamlit_authenticator as stauth
import pickle
from pathlib import Path
from data_manager import assign_project_to_user, add_project, load_projects, create_task_form, add_task, load_tasks
from gantt_chart import display_gantt

# Page configuration
st.set_page_config(page_title="Epiklah", page_icon="favicon.ico", layout="wide")

def load_css():
    st.markdown("""
        <style>
        /* Add your CSS here */
        </style>
    """, unsafe_allow_html=True)

load_css()

# User data
name = ["Admin", "Manager", "Employee1", "Employee2"]
username = ["admin", "manager", "employee1", "employee2"]

# Load hashed passwords from a pickle file
file_path = Path(__file__).parent / "hashed_pw.pkl"
with file_path.open("rb") as file:
    hashed_passwords = pickle.load(file)

# Setup authenticator
authenticator = stauth.Authenticate(name, username, hashed_passwords, "login_form", "112233", cookie_expiry_days=30)
name, authentication_status, username = authenticator.login('Login', 'main')

# Initialize or clear session state
if 'tasks' not in st.session_state:
    st.session_state.tasks = pd.DataFrame()

if authentication_status or 'logged_in' in st.session_state:
    st.sidebar.title(f"Welcome {name}")
    st.sidebar.success(f"Logged in as {username}")
    authenticator.logout("Logout", "sidebar")

    if username == 'admin':
        users = ["Manager", "Employee1", "Employee2"]
        projects = load_projects(username)
        
        st.sidebar.title("Project Management")
        st.sidebar.subheader("Create Task")
        task_df = create_task_form(st.sidebar, users, username)
        if task_df is not None:
            st.session_state.tasks = pd.concat([st.session_state.tasks, task_df], ignore_index=True)

        if not projects.empty:
            display_gantt(projects)

        if not st.session_state.tasks.empty:
            display_gantt(st.session_state.tasks)

    elif username in ['manager', 'employee1', 'employee2']:
        projects = load_projects(username)  # Filter based on username
        st.sidebar.title(f"Projects for {username}")
        if not projects.empty:
            display_gantt(projects)
else:
    st.error("Username/password is incorrect")

def show_logout_button():
    if st.sidebar.button('Log out'):
        st.session_state['logged_in'] = False
        if 'username' in st.session_state:
            del st.session_state['username']
        st.experimental_rerun()

def main():
    if 'logged_in' not in st.session_state:
        st.session_state['logged_in'] = False

    if st.session_state['logged_in']:
        show_logout_button()

if __name__ == "__main__":
    main()
2. Đây là file data_manager.py:
import pandas as pd
import streamlit as st
import sqlite3

def load_projects(user, task_only=False):
    with sqlite3.connect('project_management.db') as conn:
        c = conn.cursor()
        if task_only:
            query = """
                SELECT task_name AS Task, start_date AS Start, end_date AS Finish, assigned_to AS Resource
                FROM tasks t JOIN project_users pu ON t.project_id = pu.project_id
                WHERE pu.username = ?
            """
        else:
            query = """
                SELECT project_name AS Task, '2021-01-01' AS Start, '2021-12-31' AS Finish, created_by AS Resource
                FROM projects p JOIN project_users pu ON p.project_id = pu.project_id
                WHERE pu.username = ?
            """
        c.execute(query, (user,))
        results = c.fetchall()
        if results:
            return pd.DataFrame(results, columns=['Task', 'Start', 'Finish', 'Resource'])
        else:
            return pd.DataFrame(columns=['Task', 'Start', 'Finish', 'Resource'])  # Return empty DataFrame if no results

def add_project(project_name, creator):
    with sqlite3.connect('project_management.db') as conn:
        c = conn.cursor()
        c.execute("INSERT INTO projects (project_name, created_by) VALUES (?, ?)", (project_name, creator))
        project_id = c.lastrowid
        for user in ['admin', 'manager', 'employee1', 'employee2']:
            c.execute("INSERT INTO project_users (project_id, username) VALUES (?, ?)", (project_id, user))
        conn.commit()
        return project_id

def assign_project_to_user(project_id, username):
    with sqlite3.connect('project_management.db') as conn:
        c = conn.cursor()
        c.execute("INSERT INTO project_users (project_id, username) VALUES (?, ?)", (project_id, username))
        conn.commit()

def add_task(project_id, task_name, start_date, end_date, assigned_to):
    with sqlite3.connect('project_management.db') as conn:
        c = conn.cursor()
        c.execute("INSERT INTO tasks (project_id, task_name, start_date, end_date, assigned_to) VALUES (?, ?, ?, ?, ?)",
                  (project_id, task_name, start_date, end_date, assigned_to))
        conn.commit()

def load_tasks(project_id):
    with sqlite3.connect('project_management.db') as conn:
        c = conn.cursor()
        c.execute("SELECT task_id, task_name, start_date, end_date, assigned_to FROM tasks WHERE project_id = ?", (project_id,))
        tasks = c.fetchall()
        if tasks:
            return tasks
        else:
            return []  # Return empty list if no tasks

def create_task_form(container, users, username):
    projects = load_projects(username)
    if not projects.empty:
        project_options = {project[0]: project[1] for project in projects.itertuples(index=False)}
        project_id_selected = container.selectbox('Select or Create Project', list(project_options.keys()), format_func=lambda x: project_options[x])
    
        with container.form("task_form"):
            new_project = container.text_input("Or Enter New Project Name")
            task_name = container.text_input("Task Name")
            start_date = container.date_input("Start Date")
            end_date = container.date_input("End Date")
            assignees = container.multiselect("Assign to", users)
            submit_button = st.form_submit_button("Submit")
            
            if submit_button:
                if new_project:
                    project_id = add_project(new_project, username)
                    for user in assignees:
                        assign_project_to_user(project_id, user)
                else:
                    project_id = project_id_selected
                
                for assignee in assignees:
                    add_task(project_id, task_name, start_date, end_date, assignee)
                
                return load_tasks(project_id)

    return None

3. Đây là file gantt_chart.py:
import plotly.figure_factory as ff
import streamlit as st

def display_gantt(df):
    # Assuming df is a DataFrame with correct column names
    df_dict = df.to_dict('records')  # Convert DataFrame to list of dictionaries
    fig = ff.create_gantt(df_dict, index_col='Resource', group_tasks=True, show_colorbar=True, title='Project Gantt Chart')
    st.plotly_chart(fig, use_container_width=True)

Đây là file create_database.py:
import sqlite3

def create_database():
    # Tạo kết nối đến cơ sở dữ liệu SQLite. Nếu file chưa tồn tại, SQLite sẽ tự động tạo file mới.
    conn = sqlite3.connect('project_management.db')
    c = conn.cursor()
    
    # Tạo bảng projects
    c.execute('''
        CREATE TABLE IF NOT EXISTS projects (
            project_id INTEGER PRIMARY KEY,
            project_name TEXT NOT NULL,
            created_by TEXT NOT NULL
        )
    ''')
    
    # Tạo bảng tasks
    c.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            task_id INTEGER PRIMARY KEY,
            project_id INTEGER,
            task_name TEXT NOT NULL,
            start_date TEXT NOT NULL,
            end_date TEXT NOT NULL,
            assigned_to TEXT NOT NULL,
            FOREIGN KEY (project_id) REFERENCES projects (project_id)
        )
    ''')
    
    # Tạo bảng project_users để liên kết người dùng với các dự án
    c.execute('''
        CREATE TABLE IF NOT EXISTS project_users (
            project_id INTEGER,
            username TEXT,
            FOREIGN KEY (project_id) REFERENCES projects (project_id)
        )
    ''')

    # Lưu thay đổi và đóng kết nối
    conn.commit()
    conn.close()

# Gọi hàm để tạo cơ sở dữ liệu khi chạy ứng dụng
create_database()

Now I want you to help me update or edit the code so I can have the following features:
- If I log in as an admin, I will see the list of created projects if there are any, if not, I will be able to create a new project and can assign tasks to manager, employee 1, employee 2. Projects when created and submit will show on the grantt chart, and can be saved to the database so the admin can see it for the next login and also the manager or employee 1, employee 2 too, when there is any project they assigned by the admin, they can log in and select the assigned project to view on the grantt chart